{
  "task": "Maintenance readiness sweep on current branch: purge Solvo/Nubo residues, harden repo for maintenance mode, and update AGENTS.md",
  "instructions": [
    "Stay on the CURRENT BRANCH. Do NOT create or switch branches for this task. Detect with: git rev-parse --abbrev-ref HEAD and log it in the summary.",
    "Read .codex.json if present and follow any project-specific rules. If there is a conflict with these instructions, document the conflict in SUMMARY.md and prefer these instructions.",
    "Install dependencies with `npm ci` (if package.json exists). Do not mutate the lockfile. Fail early if Node < 20; otherwise continue.",
    "Create a working folder REPORTS/ if it doesn't exist.",
    "BRAND RESIDUE AUDIT: Search case-insensitive for the strings 'solvo' and 'nubo' across the repo excluding node_modules, dist, build outputs, lockfiles and images/binaries. Include file path and a short code/doc snippet per hit.",
    "Write a detailed report to REPORTS/brand-residue-audit.md with sections: Overview, Findings by term, Suggested neutral replacements, Potential risks.",
    "Apply SAFE CLEANUPS for branding-only occurrences: in docs, comments, README, CI messages, and metadata (like package.json description/keywords) replace 'Solvo'/'Nubo' with neutral forms: 'the project' or the actual repository name when unambiguous. DO NOT rename runtime identifiers, APIs, env vars, or published package names unless they are clearly non-public and purely cosmetic. For ambiguous cases, leave unchanged and note in the report.",
    "MAINTENANCE MODE HARDENING (non-invasive):",
    "  - Add or update the following files with minimal, neutral content if missing: README.md (status badge and short status note), SECURITY.md, SUPPORT.md, CODEOWNERS, .github/ISSUE_TEMPLATE/bug_report.yml, .github/ISSUE_TEMPLATE/config.yml, .github/PULL_REQUEST_TEMPLATE.md, .github/workflows/ci.yml, .editorconfig, .gitattributes.",
    "  - README.md: add a 'Project Status: Maintenance Mode' notice at the top with scope of support (bug fixes, security updates), how to file bugs, and link to SUPPORT.md.",
    "  - SECURITY.md: state disclosure policy, supported versions (current main only unless specified), and response window.",
    "  - SUPPORT.md: clarify what is supported (bug reports), what is not (feature requests), and expected response times.",
    "  - CODEOWNERS: ensure at least one owner entry. If a CODEOWNERS file already exists, keep existing owners and only normalize formatting.",
    "  - ISSUE TEMPLATE: provide a single bug template; disable blank issues.",
    "  - CI: create/update .github/workflows/ci.yml to run on push/pull_request with Node 20.x: steps = install with npm ci, 'npm run lint', 'npm run format:check', and 'npm test' ONLY if a test script exists. Do not add matrix, do not publish artifacts.",
    "  - package.json scripts: ensure these exist if package.json is present: `lint`, `lint:fix`, `format`, `format:check`, `prepare` (husky). If scripts already exist, don't break them; add missing ones only. Do NOT add heavy new dev deps; prefer using eslint/prettier already present.",
    "  - Engines: if package.json exists, set `engines.node` to \">=20\" (only if not set).",
    "DEPENDENCY POLICY (light touch):",
    "  - If Dependabot is already configured, leave it. If not, add .github/dependabot.yml for weekly npm updates (security and patch/minor).",
    "  - Do NOT perform interactive upgrades here. This task only sets policy and CI; no version bumps unless trivial and non-breaking (types, tooling).",
    "AGENTS.md UPDATE:",
    "  - Open AGENTS.md and keep existing 'Repository Guidelines' structure. Add a new top section 'Repository Status: Maintenance Mode' explaining scope: only bug fixes, security patches, and CI/docs chores; no new features.",
    "  - Add explicit sections: 'Support & Issue Policy', 'Release Cadence', 'Dependency Policy', 'Backport Policy', and 'Change Control' consistent with maintenance mode. Refer to npm scripts and CI commands already listed in the file.",
    "  - Cross-link to SECURITY.md, SUPPORT.md, and CI workflow where applicable. Keep tone concise and technical. Maintain the formatting style already used (headings, lists).",
    "  - Ensure naming conventions in AGENTS.md avoid brand-specific terms (remove or neutralize 'Solvo'/'Nubo' if present).",
    "STYLE & CONSISTENCY PASS:",
    "  - Run `npm run format` then `npm run lint` if scripts exist. If they don't, run prettier on markdown/yaml/json using repo config and fix trivial ESLint issues only if config exists.",
    "OUTPUTS:",
    "  - Create SUMMARY.md at repo root with: current branch name; count of brand residue findings; list of files changed; a checklist of maintenance hardening items added/verified; and any TODOs requiring human decision (e.g., ambiguous renames).",
    "  - Update CHANGELOG.md with a new 'docs/ci/chore' section summarizing maintenance-mode setup and residue cleanups. If no changelog exists, create one with Keep a Changelog format.",
    "COMMITS:",
    "  - Use Conventional Commits with small, focused commits in this order when possible:",
    "    1) docs: add maintenance status and policies (AGENTS.md, README, SECURITY, SUPPORT)",
    "    2) chore(ci): add minimal Node 20 CI",
    "    3) chore: dependabot weekly config",
    "    4) docs: replace brand residues in docs and comments",
    "    5) chore: normalize package scripts and engines",
    "    6) chore: formatting and lint fixes",
    "VALIDATION:",
    "  - Ensure CI workflow is syntactically valid (action YAML lint by eye), and that `npm run format:check` and `npm run lint` succeed locally if scripts exist.",
    "  - Leave a final note in SUMMARY.md if any step was skipped due to missing tooling or configs.",
    "Do not push tags or releases. Do not change package publish settings. Keep changes idempotent and conservative."
  ]
}
